{"version":3,"sources":["redux/contact/contact-reducer.js","redux/store.js","redux/contact/contact-actions.js","redux/contact/contact-types.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["items","createReducer","id","name","number","state","action","filter","contact","payload","console","log","arrayName","map","elem","find","el","undefined","alert","Submit","toLowerCase","combineReducers","middleware","getDefaultMiddleware","logger","data","contacts","JSON","parse","localStorage","getItem","store","configureStore","reducer","contactReducer","preloadedState","devTools","process","onDeleteContact","createAction","onSubmit","onSetFilter","connect","dispatch","actions","useState","setName","setNumber","inputChange","e","target","attributes","nodeValue","value","className","styles","contact_form","htmlFor","contact_form_input_label","contact_form_input","type","autoComplete","onChange","contact_form_button","onClick","newName","uuidv4","getVisibleContacts","visible","element","includes","useEffect","setItem","stringify","contactList","contact_list_item","contact_list_item_name","contact_list_item_number","contact_list_item_button","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.75a8015e.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as types from './contact-types';\r\n\r\n/*---------------------REDAX Toolkit--------------------*/\r\n\r\nconst initialStateItems = {\r\n  items: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Klim', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copelend', number: '227-91-26' },\r\n  ],\r\n};\r\n\r\nconst Submit = (state, { payload }) => {\r\n  console.log(state);\r\n  let arrayName = state.map(elem => elem.name).find(el => el === payload.name);\r\n  console.log(arrayName);\r\n  if (arrayName === undefined) {\r\n    return [payload, ...state];\r\n  } else {\r\n    alert(`${payload.name} уже есть в книге`);\r\n    return state;\r\n  }\r\n};\r\n\r\nconst items = createReducer(initialStateItems.items, {\r\n  'ContactList / DeleteContact': (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n  'ContactForm /Submit': (state, action) => Submit(state, action),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  'Filter/SetFilter': (state, action) => action.payload.toLowerCase(),\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n/*--------------------------REDAX-------------------------*/\r\n\r\n/*const itemsReducer = (state = initialStateItems, { type, payload }) => {\r\n  switch (type) {\r\n    case types.DELETE:\r\n      return {\r\n        items: state.items.filter(contact => contact.id !== payload),\r\n      };\r\n\r\n    case types.SUBMIT:\r\n      let arrayName = state.items\r\n        .map(elem => elem.name)\r\n        .find(el => el === payload.name);\r\n      console.log(arrayName);\r\n      if (arrayName === undefined) {\r\n        return {\r\n          items: [payload, ...state.items],\r\n        };\r\n      } else {\r\n        alert(`${payload.name} уже есть в книге`);\r\n        return state;\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};*/\r\n\r\n/*const filterReducer = (state = { filter: '' }, { type, payload }) => {\r\n  switch (type) {\r\n    case types.FILTER:\r\n      console.log(payload);\r\n      return {\r\n        filter: payload.toLowerCase(),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};*/\r\n\r\n/*export default combineReducers({\r\n  items:itemsReducer\r\n  filter: filterReducer,\r\n});*/\r\n","/*----------------------REDAX--------------------*/\r\n//import { createStore, combineReducers } from 'redux';\r\n//import { combineReducers } from 'redux';\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\n/*----------------------REDAX-Toolkit--------------------*/\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contact/contact-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst data = {\r\n  contacts: {\r\n    items: {\r\n      items: JSON.parse(localStorage.getItem('contact')),\r\n    },\r\n  },\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  preloadedState: data,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: middleware,\r\n});\r\n\r\n/*----------------------REDAX--------------------*/\r\n\r\n/*before  const rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n});*/\r\n\r\n//before const store = createStore(rootReducer, data, composeWithDevTools());\r\n\r\nexport default store;\r\n","import * as types from './contact-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n/*-----------------REDAX Toolkit-------------------*/\r\n\r\nexport const onDeleteContact = createAction(types.DELETE);\r\nexport const onSubmit = createAction(types.SUBMIT);\r\nexport const onSetFilter = createAction(types.FILTER);\r\n\r\n/*-----------------REDAX---------------------------*/\r\n\r\n/*before  export const onDeleteContact = id => ({\r\n  type: types.DELETE,\r\n  payload: id,\r\n});\r\n\r\nexport const onSubmit = newName => ({\r\n  type: types.SUBMIT,\r\n  payload: newName,\r\n});\r\n\r\nexport const onSetFilter = value => ({\r\n  type: types.FILTER,\r\n  payload: value,\r\n});*/\r\n","export const DELETE = 'ContactList / DeleteContact';\r\nexport const SUBMIT = 'ContactForm /Submit';\r\nexport const FILTER = 'Filter/SetFilter';\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const addContactName = e => {\r\n    const newName = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    if (name && number !== '') {\r\n      onSubmit(newName);\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n  };\r\n\r\n  const inputChange = e => {\r\n    if (e.target.attributes.id.nodeValue === 'name') {\r\n      setName(e.target.value);\r\n    } else if (e.target.attributes.id.nodeValue === 'number') {\r\n      setNumber(e.target.value);\r\n    }\r\n  };\r\n  return (\r\n    <form className={styles.contact_form}>\r\n      <label htmlFor={name} className={styles.contact_form_input_label}>\r\n        name\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"input\"\r\n        id=\"name\"\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={name}\r\n      />\r\n\r\n      <label htmlFor={number} className={styles.contact_form_input_label}>\r\n        number\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"input\"\r\n        id=\"number\"\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={number}\r\n      />\r\n\r\n      <button\r\n        className={styles.contact_form_button}\r\n        type=\"button\"\r\n        onClick={addContactName}\r\n      >\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSubmit: id => dispatch(actions.onSubmit(id)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Filter = ({ onSetFilter, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>find contacts by name</h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        onChange={onSetFilter}\r\n        value={filter.filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  filter: PropTypes.object.isRequired,\r\n  onFilterContact: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSetFilter: e => dispatch(actions.onSetFilter(e.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport * as actions from '../../redux/contact/contact-actions.js';\r\nimport React, { useEffect } from 'react';\r\n\r\nconst ContactList = ({ items, onDeleteContact }) => {\r\n  useEffect(() => {\r\n    localStorage.setItem('contact', JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  console.log(items.items);\r\n  return (\r\n    <ul className={styles.contactList}>\r\n      {items.map(element => (\r\n        <li key={element.id} className={styles.contact_list_item}>\r\n          <p className={styles.contact_list_item_name}>{element.name}</p>\r\n          <p className={styles.contact_list_item_number}>{element.number}</p>\r\n          <button\r\n            className={styles.contact_list_item_button}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(element.id)}\r\n          >\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (items, filter) => {\r\n  console.log(items);\r\n  console.log(filter);\r\n  const visible = items.filter(element =>\r\n    element.name.toLowerCase().includes(filter),\r\n  );\r\n  console.log(visible);\r\n  return visible;\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  items: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: id => dispatch(actions.onDeleteContact(id)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import './App.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <>\n      <h1>phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__1BYso\",\"contact_form_input\":\"ContactForm_contact_form_input__umWL8\",\"contact_form_input_label\":\"ContactForm_contact_form_input_label__2rQl1\",\"contact_form_button\":\"ContactForm_contact_form_button__1QgSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2cYnw\",\"contact_list_item\":\"ContactList_contact_list_item__1NJZ2\",\"contact_list_item_button\":\"ContactList_contact_list_item_button__TF3aA\",\"contact_list_item_name\":\"ContactList_contact_list_item_name__24aJa\",\"contact_list_item_number\":\"ContactList_contact_list_item_number__1ElYO\"};"],"sourceRoot":""}