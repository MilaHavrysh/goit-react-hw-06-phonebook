{"version":3,"sources":["redux/contact/contact-reducer.js","redux/store.js","redux/contact/contact-actions.js","redux/contact/contact-types.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["items","createReducer","id","name","number","state","action","filter","contact","payload","arrayName","map","elem","find","el","console","log","undefined","alert","Submit","toLowerCase","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactReducer","storObject","persistor","persistStore","onDeleteContact","createAction","onSubmit","onSetFilter","connect","dispatch","actions","useState","setName","setNumber","validName","setValidName","validNum","setValidNum","inputChange","e","target","attributes","nodeValue","value","validity","valid","className","styles","contact_form","htmlFor","contact_form_input_label","contact_form_input","type","pattern","title","required","autoComplete","onChange","placeholder","contact_form_button","onClick","newName","uuidv4","getVisibleContacts","element","includes","useEffect","localStorage","setItem","JSON","stringify","contactList","contact_list_item","contact_list_item_name","contact_list_item_number","contact_list_item_button","App","ReactDOM","render","StrictMode","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e8e01a86.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n//import * as types from './contact-types';\r\n\r\n/*---------------------REDAX Toolkit--------------------*/\r\n\r\nconst initialStateItems = {\r\n  items: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Klim', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copelend', number: '227-91-26' },\r\n  ],\r\n};\r\n\r\nconst Submit = (state, { payload }) => {\r\n  //console.log(state);\r\n  let arrayName = state.map(elem => elem.name).find(el => el === payload.name);\r\n  console.log(arrayName);\r\n  if (arrayName === undefined) {\r\n    return [payload, ...state];\r\n  } else {\r\n    alert(`${payload.name} уже есть в книге`);\r\n    return state;\r\n  }\r\n};\r\n\r\nconst items = createReducer(initialStateItems.items, {\r\n  'ContactList / DeleteContact': (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n  'ContactForm /Submit': (state, action) => Submit(state, action),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  'Filter/SetFilter': (state, action) => action.payload.toLowerCase(),\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n/*--------------------------REDAX-------------------------*/\r\n\r\n/*const itemsReducer = (state = initialStateItems, { type, payload }) => {\r\n  switch (type) {\r\n    case types.DELETE:\r\n      return {\r\n        items: state.items.filter(contact => contact.id !== payload),\r\n      };\r\n\r\n    case types.SUBMIT:\r\n      let arrayName = state.items\r\n        .map(elem => elem.name)\r\n        .find(el => el === payload.name);\r\n      console.log(arrayName);\r\n      if (arrayName === undefined) {\r\n        return {\r\n          items: [payload, ...state.items],\r\n        };\r\n      } else {\r\n        alert(`${payload.name} уже есть в книге`);\r\n        return state;\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};*/\r\n\r\n/*const filterReducer = (state = { filter: '' }, { type, payload }) => {\r\n  switch (type) {\r\n    case types.FILTER:\r\n      console.log(payload);\r\n      return {\r\n        filter: payload.toLowerCase(),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};*/\r\n\r\n/*export default combineReducers({\r\n  items:itemsReducer\r\n  filter: filterReducer,\r\n});*/\r\n","/*----------------------REDAX--------------------*/\r\n//import { createStore, combineReducers } from 'redux';\r\n//import { combineReducers } from 'redux';\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\n/*----------------------REDAX-Toolkit--------------------*/\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contact/contact-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n//const data = {\r\n//contacts: {\r\n// items: JSON.parse(localStorage.getItem('contact')),\r\n// },\r\n//};\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: persistReducer(persistConfig, contactReducer) },\r\n  //preloadedState: data,\r\n  //devTools: process.env.NODE_ENV === 'development',\r\n  middleware: middleware,\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nconst storObject = {\r\n  store,\r\n  persistor,\r\n};\r\n\r\nexport default storObject;\r\n\r\n/*----------------------REDAX--------------------*/\r\n\r\n/*before  const rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n});*/\r\n\r\n//before const store = createStore(rootReducer, data, composeWithDevTools());\r\n","import * as types from './contact-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n/*-----------------REDAX Toolkit-------------------*/\r\n\r\nexport const onDeleteContact = createAction(types.DELETE);\r\nexport const onSubmit = createAction(types.SUBMIT);\r\nexport const onSetFilter = createAction(types.FILTER);\r\n\r\n/*-----------------REDAX---------------------------*/\r\n\r\n/*before  export const onDeleteContact = id => ({\r\n  type: types.DELETE,\r\n  payload: id,\r\n});\r\n\r\nexport const onSubmit = newName => ({\r\n  type: types.SUBMIT,\r\n  payload: newName,\r\n});\r\n\r\nexport const onSetFilter = value => ({\r\n  type: types.FILTER,\r\n  payload: value,\r\n});*/\r\n","export const DELETE = 'ContactList / DeleteContact';\r\nexport const SUBMIT = 'ContactForm /Submit';\r\nexport const FILTER = 'Filter/SetFilter';\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [validName, setValidName] = useState(false);\r\n  const [validNum, setValidNum] = useState(false);\r\n\r\n  const addContactName = e => {\r\n    console.log(e);\r\n    const newName = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    if (name && number !== '' && validName && validNum) {\r\n      onSubmit(newName);\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n  };\r\n\r\n  const inputChange = e => {\r\n    if (e.target.attributes.id.nodeValue === 'name') {\r\n      setName(e.target.value);\r\n      setValidName(e.target.validity.valid);\r\n    } else if (e.target.attributes.id.nodeValue === 'number') {\r\n      setNumber(e.target.value);\r\n      setValidNum(e.target.validity.valid);\r\n    }\r\n  };\r\n  return (\r\n    <form className={styles.contact_form}>\r\n      <label htmlFor={name} className={styles.contact_form_input_label}>\r\n        name\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"text\"\r\n        id=\"name\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={name}\r\n        placeholder=\" \"\r\n      />\r\n\r\n      <label htmlFor={number} className={styles.contact_form_input_label}>\r\n        number\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n        required\r\n        id=\"number\"\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={number}\r\n        placeholder=\" \"\r\n      />\r\n\r\n      <button\r\n        className={styles.contact_form_button}\r\n        type=\"button\"\r\n        onClick={addContactName}\r\n      >\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSubmit: id => dispatch(actions.onSubmit(id)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Filter = ({ onSetFilter, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>find contacts by name</h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        onChange={onSetFilter}\r\n        value={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onFilterContact: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSetFilter: e => dispatch(actions.onSetFilter(e.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport * as actions from '../../redux/contact/contact-actions.js';\r\nimport React, { useEffect } from 'react';\r\n\r\nconst ContactList = ({ items, onDeleteContact }) => {\r\n  useEffect(() => {\r\n    localStorage.setItem('contact', JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  return (\r\n    <ul className={styles.contactList}>\r\n      {items.map(element => (\r\n        <li key={element.id} className={styles.contact_list_item}>\r\n          <p className={styles.contact_list_item_name}>{element.name}</p>\r\n          <p className={styles.contact_list_item_number}>{element.number}</p>\r\n          <button\r\n            className={styles.contact_list_item_button}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(element.id)}\r\n          >\r\n            delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (items, filter) => {\r\n  const visible = items.filter(element =>\r\n    element.name.toLowerCase().includes(filter),\r\n  );\r\n  return visible;\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  items: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDeleteContact: id => dispatch(actions.onDeleteContact(id)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import './App.css';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <>\n      <h1>phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__1BYso\",\"contact_form_input\":\"ContactForm_contact_form_input__umWL8\",\"contact_form_input_label\":\"ContactForm_contact_form_input_label__2rQl1\",\"contact_form_button\":\"ContactForm_contact_form_button__1QgSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2cYnw\",\"contact_list_item\":\"ContactList_contact_list_item__1NJZ2\",\"contact_list_item_button\":\"ContactList_contact_list_item_button__TF3aA\",\"contact_list_item_name\":\"ContactList_contact_list_item_name__24aJa\",\"contact_list_item_number\":\"ContactList_contact_list_item_number__1ElYO\"};"],"sourceRoot":""}